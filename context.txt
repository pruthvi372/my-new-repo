#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <fstream>

using namespace std;

class Item {
public:
    string name;
    int effect;

    Item(string n, int e) : name(n), effect(e) {}
};

class Inventory {
public:
    vector<Item> items;

    void addItem(const Item& item) {
        items.push_back(item);
        cout << "\nYou received: " << item.name << "!\n";
    }

    void useItem(int index, int &playerHealth, int maxHealth) {
        if (index < 0 || index >= items.size()) {
            cout << "Invalid item.\n";
            return;
        }
        playerHealth += items[index].effect;
        if (playerHealth > maxHealth) playerHealth = maxHealth;
        cout << "Used " << items[index].name << ". Health is now: " << playerHealth << "\n";
        items.erase(items.begin() + index);
    }

    void showItems() {
        if (items.empty()) {
            cout << "\nYour inventory is empty.\n";
            return;
        }
        cout << "\n== Inventory ==\n";
        for (int i = 0; i < items.size(); ++i) {
            cout << i + 1 << ". " << items[i].name << " (+" << items[i].effect << " HP)\n";
        }
    }
};

class Character {
public:
    string name;
    int health;
    int maxHealth;
    int attack;
    int defense;
    int level;
    int experience;
    Inventory inventory;

    Character(string n) : name(n), health(100), maxHealth(100), attack(10), defense(5), level(1), experience(0) {}

    void displayStats() {
        cout << "\n== " << name << "'s Stats ==\n";
        cout << "Level: " << level << "\n";
        cout << "Health: " << health << "/" << maxHealth << "\n";
        cout << "Attack: " << attack << "\n";
        cout << "Defense: " << defense << "\n";
        cout << "Experience: " << experience << "\n";
    }

    void levelUp() {
        if (experience >= level * 100) {
            experience -= level * 100;
            level++;
            maxHealth += 20;
            attack += 5;
            defense += 3;
            health = maxHealth;
            cout << "\nYou leveled up to level " << level << "!\n";
        }
    }
};

class Monster {
public:
    string type;
    int health;
    int attack;
    int defense;

    Monster(string t, int h, int a, int d) : type(t), health(h), attack(a), defense(d) {}

    static Monster generateRandom() {
        string names[] = {"Goblin", "Skeleton", "Orc", "Wolf", "Zombie", "Slime"};
        int index = rand() % 6;
        int baseHealth = 30 + rand() % 50;
        int baseAttack = 5 + rand() % 10;
        int baseDefense = 3 + rand() % 5;
        return Monster(names[index], baseHealth, baseAttack, baseDefense);
    }
};

void clearInput() {
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

void combat(Character &player, Monster monster) {
    cout << "\nA wild " << monster.type << " appears!\n";

    while (player.health > 0 && monster.health > 0) {
        cout << "\nYour HP: " << player.health << ", " << monster.type << "'s HP: " << monster.health << "\n";
        cout << "1. Attack\n2. Defend\n3. Use Item\nChoose action: ";
        int choice;
        cin >> choice;
        clearInput();

        if (choice == 1) {
            int damage = player.attack - monster.defense;
            if (damage < 0) damage = 0;
            monster.health -= damage;
            cout << "\nYou hit the " << monster.type << " for " << damage << " damage!\n";
        } else if (choice == 2) {
            cout << "\nYou brace for the next attack.\n";
        } else if (choice == 3) {
            player.inventory.showItems();
            cout << "Choose item to use (0 to cancel): ";
            int itemChoice;
            cin >> itemChoice;
            clearInput();
            if (itemChoice > 0)
                player.inventory.useItem(itemChoice - 1, player.health, player.maxHealth);
        } else {
            cout << "Invalid action.\n";
            continue;
        }

        if (monster.health > 0) {
            int damage = monster.attack - player.defense;
            if (choice == 2) damage /= 2;
            if (damage < 0) damage = 0;
            player.health -= damage;
            cout << "The " << monster.type << " hits you for " << damage << " damage!\n";
        }
    }

    if (player.health > 0) {
        cout << "\nYou defeated the " << monster.type << "!\n";
        int expGain = 50 + rand() % 50;
        player.experience += expGain;
        cout << "You gained " << expGain << " EXP!\n";
        player.levelUp();

        if (rand() % 2 == 0) {
            Item potion("Health Potion", 30);
            player.inventory.addItem(potion);
        }

    } else {
        cout << "\nYou were defeated... Game Over.\n";
        exit(0);
    }
}

void explore(Character &player) {
    cout << "\nYou venture into the dark dungeon...\n";
    if (rand() % 100 < 80) {
        Monster m = Monster::generateRandom();
        combat(player, m);
    } else {
        cout << "\nYou find a health potion and recover 20 HP!\n";
        player.health += 20;
        if (player.health > player.maxHealth) player.health = player.maxHealth;
    }
}

void saveGame(Character &player) {
    ofstream file("savegame.txt");
    file << player.name << "\n" << player.health << "\n" << player.maxHealth << "\n" << player.attack << "\n" << player.defense << "\n" << player.level << "\n" << player.experience << "\n";
    file << player.inventory.items.size() << "\n";
    for (auto &item : player.inventory.items) {
        file << item.name << " " << item.effect << "\n";
    }
    file.close();
    cout << "\nGame saved!\n";
}

bool loadGame(Character &player) {
    ifstream file("savegame.txt");
    if (!file.is_open()) return false;
    getline(file, player.name);
    file >> player.health >> player.maxHealth >> player.attack >> player.defense >> player.level >> player.experience;
    int itemCount;
    file >> itemCount;
    player.inventory.items.clear();
    for (int i = 0; i < itemCount; ++i) {
        string itemName;
        int itemEffect;
        file >> itemName >> itemEffect;
        player.inventory.addItem(Item(itemName, itemEffect));
    }
    file.close();
    return true;
}

void gameLoop(Character &player) {
    while (true) {
        cout << "\n== Dungeon Menu ==\n";
        cout << "1. Explore\n2. View Stats\n3. Inventory\n4. Save Game\n5. Exit\nChoose an option: ";
        int option;
        cin >> option;
        clearInput();

        switch (option) {
            case 1:
                explore(player);
                break;
            case 2:
                player.displayStats();
                break;
            case 3:
                player.inventory.showItems();
                break;
            case 4:
                saveGame(player);
                break;
            case 5:
                cout << "\nThanks for playing!\n";
                return;
            default:
                cout << "\nInvalid option. Try again.\n";
        }
    }
}

int main() {
    srand(static_cast<unsigned int>(time(0)));
    Character player("Hero");
    cout << "Load previous game? (y/n): ";
    char load;
    cin >> load;
    clearInput();
    if (load == 'y' || load == 'Y') {
        if (!loadGame(player)) cout << "\nNo save found. Starting new game.\n";
    } else {
        cout << "\nEnter your character's name: ";
        string name;
        getline(cin, name);
        player.name = name;
    }
    gameLoop(player);
    return 0;
}
#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <fstream>

using namespace std;

class Item {
public:
    string name;
    int effect;

    Item(string n, int e) : name(n), effect(e) {}
};

class Inventory {
public:
    vector<Item> items;

    void addItem(const Item& item) {
        items.push_back(item);
        cout << "\nYou received: " << item.name << "!\n";
    }

    void useItem(int index, int &playerHealth, int maxHealth) {
        if (index < 0 || index >= items.size()) {
            cout << "Invalid item.\n";
            return;
        }
        playerHealth += items[index].effect;
        if (playerHealth > maxHealth) playerHealth = maxHealth;
        cout << "Used " << items[index].name << ". Health is now: " << playerHealth << "\n";
        items.erase(items.begin() + index);
    }

    void showItems() {
        if (items.empty()) {
            cout << "\nYour inventory is empty.\n";
            return;
        }
        cout << "\n== Inventory ==\n";
        for (int i = 0; i < items.size(); ++i) {
            cout << i + 1 << ". " << items[i].name << " (+" << items[i].effect << " HP)\n";
        }
    }
};

class Character {
public:
    string name;
    int health;
    int maxHealth;
    int attack;
    int defense;
    int level;
    int experience;
    Inventory inventory;

    Character(string n) : name(n), health(100), maxHealth(100), attack(10), defense(5), level(1), experience(0) {}

    void displayStats() {
        cout << "\n== " << name << "'s Stats ==\n";
        cout << "Level: " << level << "\n";
        cout << "Health: " << health << "/" << maxHealth << "\n";
        cout << "Attack: " << attack << "\n";
        cout << "Defense: " << defense << "\n";
        cout << "Experience: " << experience << "\n";
    }

    void levelUp() {
        if (experience >= level * 100) {
            experience -= level * 100;
            level++;
            maxHealth += 20;
            attack += 5;
            defense += 3;
            health = maxHealth;
            cout << "\nYou leveled up to level " << level << "!\n";
        }
    }
};

class Monster {
public:
    string type;
    int health;
    int attack;
    int defense;

    Monster(string t, int h, int a, int d) : type(t), health(h), attack(a), defense(d) {}

    static Monster generateRandom() {
        string names[] = {"Goblin", "Skeleton", "Orc", "Wolf", "Zombie", "Slime"};
        int index = rand() % 6;
        int baseHealth = 30 + rand() % 50;
        int baseAttack = 5 + rand() % 10;
        int baseDefense = 3 + rand() % 5;
        return Monster(names[index], baseHealth, baseAttack, baseDefense);
    }
};

void clearInput() {
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

void combat(Character &player, Monster monster) {
    cout << "\nA wild " << monster.type << " appears!\n";

    while (player.health > 0 && monster.health > 0) {
        cout << "\nYour HP: " << player.health << ", " << monster.type << "'s HP: " << monster.health << "\n";
        cout << "1. Attack\n2. Defend\n3. Use Item\nChoose action: ";
        int choice;
        cin >> choice;
        clearInput();

        if (choice == 1) {
            int damage = player.attack - monster.defense;
            if (damage < 0) damage = 0;
            monster.health -= damage;
            cout << "\nYou hit the " << monster.type << " for " << damage << " damage!\n";
        } else if (choice == 2) {
            cout << "\nYou brace for the next attack.\n";
        } else if (choice == 3) {
            player.inventory.showItems();
            cout << "Choose item to use (0 to cancel): ";
            int itemChoice;
            cin >> itemChoice;
            clearInput();
            if (itemChoice > 0)
                player.inventory.useItem(itemChoice - 1, player.health, player.maxHealth);
        } else {
            cout << "Invalid action.\n";
            continue;
        }

        if (monster.health > 0) {
            int damage = monster.attack - player.defense;
            if (choice == 2) damage /= 2;
            if (damage < 0) damage = 0;
            player.health -= damage;
            cout << "The " << monster.type << " hits you for " << damage << " damage!\n";
        }
    }

    if (player.health > 0) {
        cout << "\nYou defeated the " << monster.type << "!\n";
        int expGain = 50 + rand() % 50;
        player.experience += expGain;
        cout << "You gained " << expGain << " EXP!\n";
        player.levelUp();

        if (rand() % 2 == 0) {
            Item potion("Health Potion", 30);
            player.inventory.addItem(potion);
        }

    } else {
        cout << "\nYou were defeated... Game Over.\n";
        exit(0);
    }
}

void explore(Character &player) {
    cout << "\nYou venture into the dark dungeon...\n";
    if (rand() % 100 < 80) {
        Monster m = Monster::generateRandom();
        combat(player, m);
    } else {
        cout << "\nYou find a health potion and recover 20 HP!\n";
        player.health += 20;
        if (player.health > player.maxHealth) player.health = player.maxHealth;
    }
}

void saveGame(Character &player) {
    ofstream file("savegame.txt");
    file << player.name << "\n" << player.health << "\n" << player.maxHealth << "\n" << player.attack << "\n" << player.defense << "\n" << player.level << "\n" << player.experience << "\n";
    file << player.inventory.items.size() << "\n";
    for (auto &item : player.inventory.items) {
        file << item.name << " " << item.effect << "\n";
    }
    file.close();
    cout << "\nGame saved!\n";
}

bool loadGame(Character &player) {
    ifstream file("savegame.txt");
    if (!file.is_open()) return false;
    getline(file, player.name);
    file >> player.health >> player.maxHealth >> player.attack >> player.defense >> player.level >> player.experience;
    int itemCount;
    file >> itemCount;
    player.inventory.items.clear();
    for (int i = 0; i < itemCount; ++i) {
        string itemName;
        int itemEffect;
        file >> itemName >> itemEffect;
        player.inventory.addItem(Item(itemName, itemEffect));
    }
    file.close();
    return true;
}

void gameLoop(Character &player) {
    while (true) {
        cout << "\n== Dungeon Menu ==\n";
        cout << "1. Explore\n2. View Stats\n3. Inventory\n4. Save Game\n5. Exit\nChoose an option: ";
        int option;
        cin >> option;
        clearInput();

        switch (option) {
            case 1:
                explore(player);
                break;
            case 2:
                player.displayStats();
                break;
            case 3:
                player.inventory.showItems();
                break;
            case 4:
                saveGame(player);
                break;
            case 5:
                cout << "\nThanks for playing!\n";
                return;
            default:
                cout << "\nInvalid option. Try again.\n";
        }
    }
}

int main() {
    srand(static_cast<unsigned int>(time(0)));
    Character player("Hero");
    cout << "Load previous game? (y/n): ";
    char load;
    cin >> load;
    clearInput();
    if (load == 'y' || load == 'Y') {
        if (!loadGame(player)) cout << "\nNo save found. Starting new game.\n";
    } else {
        cout << "\nEnter your character's name: ";
        string name;
        getline(cin, name);
        player.name = name;
    }
    gameLoop(player);
    return 0;
}
#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <fstream>

using namespace std;

class Item {
public:
    string name;
    int effect;

    Item(string n, int e) : name(n), effect(e) {}
};

class Inventory {
public:
    vector<Item> items;

    void addItem(const Item& item) {
        items.push_back(item);
        cout << "\nYou received: " << item.name << "!\n";
    }

    void useItem(int index, int &playerHealth, int maxHealth) {
        if (index < 0 || index >= items.size()) {
            cout << "Invalid item.\n";
            return;
        }
        playerHealth += items[index].effect;
        if (playerHealth > maxHealth) playerHealth = maxHealth;
        cout << "Used " << items[index].name << ". Health is now: " << playerHealth << "\n";
        items.erase(items.begin() + index);
    }

    void showItems() {
        if (items.empty()) {
            cout << "\nYour inventory is empty.\n";
            return;
        }
        cout << "\n== Inventory ==\n";
        for (int i = 0; i < items.size(); ++i) {
            cout << i + 1 << ". " << items[i].name << " (+" << items[i].effect << " HP)\n";
        }
    }
};

class Character {
public:
    string name;
    int health;
    int maxHealth;
    int attack;
    int defense;
    int level;
    int experience;
    Inventory inventory;

    Character(string n) : name(n), health(100), maxHealth(100), attack(10), defense(5), level(1), experience(0) {}

    void displayStats() {
        cout << "\n== " << name << "'s Stats ==\n";
        cout << "Level: " << level << "\n";
        cout << "Health: " << health << "/" << maxHealth << "\n";
        cout << "Attack: " << attack << "\n";
        cout << "Defense: " << defense << "\n";
        cout << "Experience: " << experience << "\n";
    }

    void levelUp() {
        if (experience >= level * 100) {
            experience -= level * 100;
            level++;
            maxHealth += 20;
            attack += 5;
            defense += 3;
            health = maxHealth;
            cout << "\nYou leveled up to level " << level << "!\n";
        }
    }
};

class Monster {
public:
    string type;
    int health;
    int attack;
    int defense;

    Monster(string t, int h, int a, int d) : type(t), health(h), attack(a), defense(d) {}

    static Monster generateRandom() {
        string names[] = {"Goblin", "Skeleton", "Orc", "Wolf", "Zombie", "Slime"};
        int index = rand() % 6;
        int baseHealth = 30 + rand() % 50;
        int baseAttack = 5 + rand() % 10;
        int baseDefense = 3 + rand() % 5;
        return Monster(names[index], baseHealth, baseAttack, baseDefense);
    }
};

void clearInput() {
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

void combat(Character &player, Monster monster) {
    cout << "\nA wild " << monster.type << " appears!\n";

    while (player.health > 0 && monster.health > 0) {
        cout << "\nYour HP: " << player.health << ", " << monster.type << "'s HP: " << monster.health << "\n";
        cout << "1. Attack\n2. Defend\n3. Use Item\nChoose action: ";
        int choice;
        cin >> choice;
        clearInput();

        if (choice == 1) {
            int damage = player.attack - monster.defense;
            if (damage < 0) damage = 0;
            monster.health -= damage;
            cout << "\nYou hit the " << monster.type << " for " << damage << " damage!\n";
        } else if (choice == 2) {
            cout << "\nYou brace for the next attack.\n";
        } else if (choice == 3) {
            player.inventory.showItems();
            cout << "Choose item to use (0 to cancel): ";
            int itemChoice;
            cin >> itemChoice;
            clearInput();
            if (itemChoice > 0)
                player.inventory.useItem(itemChoice - 1, player.health, player.maxHealth);
        } else {
            cout << "Invalid action.\n";
            continue;
        }

        if (monster.health > 0) {
            int damage = monster.attack - player.defense;
            if (choice == 2) damage /= 2;
            if (damage < 0) damage = 0;
            player.health -= damage;
            cout << "The " << monster.type << " hits you for " << damage << " damage!\n";
        }
    }

    if (player.health > 0) {
        cout << "\nYou defeated the " << monster.type << "!\n";
        int expGain = 50 + rand() % 50;
        player.experience += expGain;
        cout << "You gained " << expGain << " EXP!\n";
        player.levelUp();

        if (rand() % 2 == 0) {
            Item potion("Health Potion", 30);
            player.inventory.addItem(potion);
        }

    } else {
        cout << "\nYou were defeated... Game Over.\n";
        exit(0);
    }
}

void explore(Character &player) {
    cout << "\nYou venture into the dark dungeon...\n";
    if (rand() % 100 < 80) {
        Monster m = Monster::generateRandom();
        combat(player, m);
    } else {
        cout << "\nYou find a health potion and recover 20 HP!\n";
        player.health += 20;
        if (player.health > player.maxHealth) player.health = player.maxHealth;
    }
}

void saveGame(Character &player) {
    ofstream file("savegame.txt");
    file << player.name << "\n" << player.health << "\n" << player.maxHealth << "\n" << player.attack << "\n" << player.defense << "\n" << player.level << "\n" << player.experience << "\n";
    file << player.inventory.items.size() << "\n";
    for (auto &item : player.inventory.items) {
        file << item.name << " " << item.effect << "\n";
    }
    file.close();
    cout << "\nGame saved!\n";
}

bool loadGame(Character &player) {
    ifstream file("savegame.txt");
    if (!file.is_open()) return false;
    getline(file, player.name);
    file >> player.health >> player.maxHealth >> player.attack >> player.defense >> player.level >> player.experience;
    int itemCount;
    file >> itemCount;
    player.inventory.items.clear();
    for (int i = 0; i < itemCount; ++i) {
        string itemName;
        int itemEffect;
        file >> itemName >> itemEffect;
        player.inventory.addItem(Item(itemName, itemEffect));
    }
    file.close();
    return true;
}

void gameLoop(Character &player) {
    while (true) {
        cout << "\n== Dungeon Menu ==\n";
        cout << "1. Explore\n2. View Stats\n3. Inventory\n4. Save Game\n5. Exit\nChoose an option: ";
        int option;
        cin >> option;
        clearInput();

        switch (option) {
            case 1:
                explore(player);
                break;
            case 2:
                player.displayStats();
                break;
            case 3:
                player.inventory.showItems();
                break;
            case 4:
                saveGame(player);
                break;
            case 5:
                cout << "\nThanks for playing!\n";
                return;
            default:
                cout << "\nInvalid option. Try again.\n";
        }
    }
}

int main() {
    srand(static_cast<unsigned int>(time(0)));
    Character player("Hero");
    cout << "Load previous game? (y/n): ";
    char load;
    cin >> load;
    clearInput();
    if (load == 'y' || load == 'Y') {
        if (!loadGame(player)) cout << "\nNo save found. Starting new game.\n";
    } else {
        cout << "\nEnter your character's name: ";
        string name;
        getline(cin, name);
        player.name = name;
    }
    gameLoop(player);
    return 0;
}
